package policia360.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TrabajadoresAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrabajadoresAllPropertiesEquals(Trabajadores expected, Trabajadores actual) {
        assertTrabajadoresAutoGeneratedPropertiesEquals(expected, actual);
        assertTrabajadoresAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrabajadoresAllUpdatablePropertiesEquals(Trabajadores expected, Trabajadores actual) {
        assertTrabajadoresUpdatableFieldsEquals(expected, actual);
        assertTrabajadoresUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrabajadoresAutoGeneratedPropertiesEquals(Trabajadores expected, Trabajadores actual) {
        assertThat(expected)
            .as("Verify Trabajadores auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrabajadoresUpdatableFieldsEquals(Trabajadores expected, Trabajadores actual) {
        assertThat(expected)
            .as("Verify Trabajadores relevant properties")
            .satisfies(e -> assertThat(e.getDni()).as("check dni").isEqualTo(actual.getDni()))
            .satisfies(e -> assertThat(e.getPuesto()).as("check puesto").isEqualTo(actual.getPuesto()))
            .satisfies(e -> assertThat(e.getTurno()).as("check turno").isEqualTo(actual.getTurno()))
            .satisfies(e -> assertThat(e.getAntiguedad()).as("check antiguedad").isEqualTo(actual.getAntiguedad()))
            .satisfies(e -> assertThat(e.getEstado()).as("check estado").isEqualTo(actual.getEstado()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrabajadoresUpdatableRelationshipsEquals(Trabajadores expected, Trabajadores actual) {
        assertThat(expected)
            .as("Verify Trabajadores relationships")
            .satisfies(e -> assertThat(e.getVehiculos()).as("check vehiculos").isEqualTo(actual.getVehiculos()));
    }
}
